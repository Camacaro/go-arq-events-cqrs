user nginx;

# Cuantos procesos vamos a tener
worker_processes 1;
events {
  worker_connections 1024;
}

# Entrar a los servicios
http {
  # Reglas

  # /feeds -> POST -> crear un feed
  upstream feeds_POST {
    # Servicio de docker compose en el puerto 3000
    server feed:3000;
  }

  # /feeds -> GET -> obtener todos los feeds
  upstream feeds_GET {
    # Servicio de docker compose en el puerto 3000
    server query:3000;
  }

  # /search&q="asd" -> GET -> buscar feeds con el termino "asd"
  upstream search_GET {
    # Servicio de docker compose en el puerto 3000
    server query:3000;
  }

  # Servidor websocket
  upstream pusher {
    server pusher:3000;
  }

  # Definicion del server 
  server {
    # remote_addr es la request que esta realizando la peticion, el cliente
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header host $http_host;
    # Cors
    add_header Access-Control-Allow-Origin *;

    # Locaciones 


    location /feeds {
      # Proxy para el servicio de feeds, todos los que sean distintos de GET y POST seran denegados
      limit_except GET POST OPTIONS {
        deny all;
      }

      # Al pasar lo mandaremos al feeds_POST o feeds_GET dde arrieba la regla de upstream
      proxy_pass http://feeds_$request_method;
    }

    location /search {
      # Proxy para el servicio de feeds, todos los que sean distintos de GET seran denegados
      limit_except GET OPTIONS {
        deny all;
      }

      # Al pasar lo mandaremos al search_GET  dde arrieba la regla de upstream
      proxy_pass http://search_GET;
    }

    # Websocket
    location /ws {
      # Para conectarse por websocket hay que hacer un upgrade
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      # Todo lo que vaya a /ws ira al pusher
      proxy_pass http://pusher;
    }
  }
}

